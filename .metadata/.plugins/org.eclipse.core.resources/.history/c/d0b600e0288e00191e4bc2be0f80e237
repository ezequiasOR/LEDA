package adt.btree;

import java.util.LinkedList;

public class BTreeImpl<T extends Comparable<T>> implements BTree<T> {

	protected BNode<T> root;
	protected int order;

	public BTreeImpl(int order) {
		this.order = order;
		this.root = new BNode<T>(order);
	}

	@Override
	public BNode<T> getRoot() {
		return this.root;
	}

	@Override
	public boolean isEmpty() {
		return this.root.isEmpty();
	}

	@Override
	public int height() {
		return height(this.root);
	}
	
	private int height(BNode<T> node) {
		int result = 0;
		if (!node.isEmpty()) {
			result += 1 + height(node.getChildren().getFirst());
		}
		return result;
	}

	@Override
	public BNode<T>[] depthLeftOrder() {
		LinkedList<BNode<T>> list = new LinkedList<BNode<T>>();
		depthLeftOrderRec(list, root);
		@SuppressWarnings("unchecked")
		BNode<T>[] arrayAux = (BNode<T>[]) new BNode[list.size()];
		return list.toArray(arrayAux);
	}

	private void depthLeftOrderRec(LinkedList<BNode<T>> auxList, BNode<T> node) {
		auxList.add(node);
		for (BNode<T> e : node.getChildren()) {
			depthLeftOrderRec(auxList, e);
		}
	}

	@Override
	public int size() {
		return size(root);
	}

	private int size(BNode<T> node) {
		int result = node.size();
		for (BNode<T> element : node.getChildren()) {
			result += size(element);
		}
		return result;
	}

	@Override
	public BNodePosition<T> search(T element) {
		return search(root, element);
	}

	private BNodePosition<T> search(BNode<T> node, T element) {
		BNodePosition<T> result = new BNodePosition<T>();
		int index = node.getElements().indexOf(element);
		if (index != -1) {
			result = new BNodePosition<T>(node, index);
		} else {
			for (BNode<T> e : node.getChildren()) {
				BNodePosition<T> aux = search(e, element);
				if (aux.node != null) {
					result = aux;
					break;
				}
			}
		}
		return result;
	}

	@Override
	public void insert(T element) {
		if (element != null && this.search(element).node == null) {
			insert(this.root, element);
		}
	}

	private void insert(BNode<T> node, T element) {
		if (node.isFull()) {
			split(node);
			if (node.getParent() != null) {
				node = node.getParent();
			}
		}
		if (node.getChildren().isEmpty()) {
			node.addElement(element);
		} else {
			int i;
			for (i = 0; i < node.size(); i++) {
				T e = node.getElements().get(i);
				if (e.compareTo(element) > 0) {
					insert(node.getChildren().get(i), element);
					break;
				}
			}
			if (i == node.size()) {
				
			}
		}
	}

	private void split(BNode<T> node) {
		// TODO Implement your code here
		throw new UnsupportedOperationException("Not Implemented yet!");
	}

	private void promote(BNode<T> node) {
		// TODO Implement your code here
		throw new UnsupportedOperationException("Not Implemented yet!");
	}

	// NAO PRECISA IMPLEMENTAR OS METODOS ABAIXO
	@Override
	public BNode<T> maximum(BNode<T> node) {
		// NAO PRECISA IMPLEMENTAR
		throw new UnsupportedOperationException("Not Implemented yet!");
	}

	@Override
	public BNode<T> minimum(BNode<T> node) {
		// NAO PRECISA IMPLEMENTAR
		throw new UnsupportedOperationException("Not Implemented yet!");
	}

	@Override
	public void remove(T element) {
		// NAO PRECISA IMPLEMENTAR
		throw new UnsupportedOperationException("Not Implemented yet!");
	}

}
